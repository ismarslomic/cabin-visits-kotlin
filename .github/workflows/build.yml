name: Build and publish

on:
  push:
    branches: [ 'main' ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
    # Don't trigger if changes done to .md or .txt files
    paths-ignore:
      - '**/*.md'

  pull_request:
    branches: [ 'main' ]
    # Don't trigger if changes done to .md or .txt files
    paths-ignore:
      - '**/*.md'

env:
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-native-image:
    name: Build GraalVM native image

    runs-on: ubuntu-24.04

    steps:
      # Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up GraalVM (see https://github.com/graalvm/setup-graalvm)
      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          native-image-musl: true # sets up musl to build static binaries with GraalVM Native Image
          version: "23.0.2" # Adjust to your required GraalVM version
          distribution: "graalvm" # GraalVM distribution
          java-version: "23" # Or the appropriate Java version

      # Set up Gradle
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      # Run Kotlin linter checks
      - name: Run Ktlint
        run: ./gradlew lintKotlin --no-daemon

      # Run Tests
      - name: Run Tests
        run: ./gradlew test --no-daemon

      # Upload code coverage to codecov.io
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      # Upload test results for codecov.io Test Analytics
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: build/test-results/test

      # Run Detekt
      - name: Run Detekt analysis
        run: ./gradlew detekt --no-daemon

      # Uploads Detekt results to GitHub repository using the upload-sarif action
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        # workflows triggered by Dependabot on push events run with read-only access, meaning they can't upload
        # SARIF reports for code scanning
        if: github.event_name == 'pull_request' || github.actor != 'dependabot[bot]'
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: ${{ github.workspace }}/build/reports/detekt/detekt.sarif
          checkout_path: ${{ github.workspace }}

      # Build the GraalVM native image with Gradle
      - name: Build GraalVM native image
        run: |
          ./gradlew nativeCompile -PnativeBuildArgs="--static,--libc=musl,-march=compatibility" --no-daemon
          mkdir -p output
          cp ./build/native/nativeCompile/graalvm-server output/graalvm-server
          cp ./Dockerfile output/Dockerfile
          cp ./README.md output/README.md 

      # Upload complied GraalVM native image as artifact for accessing in the 'containerize' job
      - name: Upload native image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: graalvm-native-image # Name of the artifact to upload
          path: output/ # A file, directory or wildcard pattern that describes what to upload
          if-no-files-found: error # Fail the action with an error message
          retention-days: 1 # Duration after which artifact will expire in days
          overwrite: true # If true, an artifact with a matching name will be deleted before a new one is uploaded

  containerize:
    name: Containerize & push Docker Hub

    # Run only if build-native-image completes successfully
    needs: build-native-image

    runs-on: ubuntu-24.04

    steps:
      # Download the GraalVM native image compiled in the 'build-native-image' job
      - name: Download native image artifact
        uses: actions/download-artifact@v4
        with:
          name: graalvm-native-image # Name of the artifact to download
          path: native-image/ # Destination path. Supports basic tilde expansion.

      # Build the GraalVM native image with Gradle
      - name: Make the native image executable
        run: chmod +x native-image/graalvm-server

      - name: Log downloaded files
        run: ls -R native-image/

      # Extract metadata (tags, labels, image name) from GIT to use in Docker Build Push step
      # https://github.com/docker/metadata-action
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          # tag = 'main' when push event to 'main' branch
          # tag = 'pr-X' when push event to pull request
          # tag = 'major.minor.patch' when push event of new tag
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
          labels: |
            maintainer=Ismar Slomic
            org.opencontainers.image.documentation=https://github.com/ismarslomic/cabin-visits-kotlin
            org.opencontainers.image.vendor=ismarslomic
            org.opencontainers.image.description=HTTP endpoints to receive data from different sources to collect all data belonging to a visit at Slomic Smarthytte and store it to a database.

      # Setup QEMU for building various versions of container
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Setup Buildx before building container
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to DockerHub
      # https://github.com/docker/login-action
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Build and Push image if release tag (in format v1.0.0),
      # tag the image with 'git tag' and along with 'latest'
      # https://github.com/docker/build-push-action
      - name: Build & Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: native-image/
          file: native-image/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64/v8
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Show image digest from docker build
      - name: Image Digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      # Update Docker Hub repo with description from README.md
      # https://github.com/peter-evans/dockerhub-description
      - name: Update image description in Docker Hub
        uses: peter-evans/dockerhub-description@v4
        with:
          readme-filepath: native-image/README.md # Path to the repository readme.
          username: ${{ secrets.DOCKER_HUB_USERNAME }} # Docker Hub username
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} # Docker Hub password
          repository: ${{ env.IMAGE_NAME }} # Docker Hub repository
          short-description: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }} # Docker Hub repository short description.
